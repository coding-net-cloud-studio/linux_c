{
    "mediaPreview.video.autoPlay": true,
    "search.useIgnoreFiles": true,
    "editor.fontSize": 20,
    "editor.mouseWheelZoom": true,
    "terminal.integrated.experimentalImageSupport": true,
    "terminal.integrated.fontSize": 18,
    "go.inferGopath": false,
    "cloudstudio.autosleep": "no",
    "go.toolsManagement.autoUpdate": true,
    "redhat.telemetry.enabled": false,
    "[go]": {
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
            "source.organizeImports": true,
        },
        // Optional: Disable snippets, as they conflict with completion ranking.
        "editor.snippetSuggestions": "none",
    },
    "[go.mod]": {
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
            "source.organizeImports": true,
        },
    },
    "gopls": {
        // Add parameter placeholders when completing a function.
        "usePlaceholders": true,
        // If true, enable additional analyses with staticcheck.
        // Warning: This will significantly increase memory usage.
        "staticcheck": false,
        // "experimentalWorkspaceModule": true,
    },
    "go.testFlags": [
        "-v"
    ],
    "code-runner.fileDirectoryAsCwd": true,
    "code-runner.runInTerminal": true,
    "code-runner.executorMapByGlob": {
        "Makefile": "cd $dir && make -f $fileName",
        "makefile": "cd $dir && make -f $fileName",
        "go.mod": "cd $dir && go mod download -x",
    },
    "code-runner.executorMapByFileExtension": {
        ".vb": "cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",
        ".vbs": "cscript //Nologo",
        ".scala": "scala",
        ".jl": "julia",
        ".cr": "crystal",
        ".ml": "ocaml",
        ".exs": "elixir",
        ".hx": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
        ".rkt": "racket",
        ".scm": "csi -script",
        ".ahk": "autohotkey",
        ".au3": "autoit3",
        ".kt": "cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",
        ".kts": "kotlinc -script",
        ".dart": "dart",
        ".pas": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
        ".pp": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
        ".d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
        ".hs": "runhaskell",
        ".nim": "nim compile --verbosity:0 --hints:off --run",
        ".csproj": "dotnet run --project",
        ".fsproj": "dotnet run --project",
        ".lisp": "sbcl --script",
        ".kit": "kitc --run",
        ".v": "v run",
        ".vsh": "v run",
        ".sass": "sass --style expanded",
        ".cu": "cd $dir && nvcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        ".ring": "ring",
        ".sml": "cd $dir && sml $fileName",
        ".gop": "cd $dir && gop run $fileName",
        ".go": "cd $dir && GO111MODULE=auto  go run $fileName",
        ".wmmake": "cd $dir && make -f $fileName",
    },
    "bookmarks.saveBookmarksInProject": true,
    "bookmarks.sideBar.expanded": true,
    "bookmarks.useWorkaroundForFormatters": true,
    "presentation-buddy.delay": 50,
    "presentation-buddy.randomness": 20,
    "[go][go.mod]": {
        "editor.codeActionsOnSave": {
            "source.organizeImports": "explicit"
        }
    },
    "[c]": {
        "editor.defaultFormatter": "ms-vscode.cpptools"
    },
    "C_Cpp.markdownInComments": "enabled",
    // "C_Cpp.clang_format_path": "${workspaceFolder}/.vscode/format/clang-format.exe",
    "C_Cpp.clang_format_style": "file:${workspaceFolder}/.vscode/format/.clang-format",
    "C_Cpp.formatting": "clangFormat",
    //   "editor.formatOnSave": true,
    "formatFiles.excludedFolders": [
        "node_modules",
        ".vscode",
        ".git",
        "dist",
        ".chrome",
        ".wmstudy",
        ".out",
        "dist",
        ".tours",
        ".tutorial",
        ".air",
        ".presentation-buddy"
    ],
    "formatFiles.extensionsToInclude": "c, cpp, h, ts, js, json",
    "formatFiles.excludePattern": "md,hdnb",
    "files.exclude": {
        "**/*.o": true,
        "**/*.a": true,
      }
}
